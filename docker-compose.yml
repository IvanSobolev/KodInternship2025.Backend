services:
  demo_api:
    zookeeper:
      image: confluentinc/cp-zookeeper:7.3.2
      hostname: zookeeper
      container_name: zookeeper
      ports:
        - "2181:2181"
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000
      healthcheck:
        test: [ "CMD", "sh", "-c", "echo 'ruok' | nc -w 2 localhost 2181" ]
        interval: 10s
        timeout: 5s
        retries: 5

      kafka:
        image: confluentinc/cp-kafka:7.3.2
        hostname: kafka
        container_name: kafka
        ports:
          - "9092:9092"
          - "29092:29092"
        environment:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 
          KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
          KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1 
          KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
          KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        depends_on:
          zookeeper:
            condition: service_healthy
        healthcheck:
          test: [ "CMD", "sh", "-c", "/usr/bin/kafka-topics --bootstrap-server localhost:9092 --list" ]
          interval: 30s
          timeout: 10s
          retries: 5
    build:
      context: .
      dockerfile: Demo.API/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - ASPNETCORE_URLS=http://+:8080
      - ASPNETCORE_ENVIRONMENT=Development
      - DB_CONNECTION_STRING=Host=${DB_TASK_HOST};Port=5432;Database=${DB_TASK_DB};Username=${DB_TASK_USER};Password=${DB_TASK_PASSWORD}
    depends_on:
      task_db:
        condition: service_healthy
  
  task_db:
    image: postgres
    environment:
      - POSTGRES_USER=${DB_TASK_USER}
      - POSTGRES_PASSWORD=${DB_TASK_PASSWORD}
      - POSTGRES_DB=${DB_TASK_DB}
    volumes:
      - task_db_data:/var/lib/postgresql/data
    ports:
      - "${DB_TASK_PORT}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $DB_TASK_USER -d $DB_TASK_DB" ]
      interval: 5s
      timeout: 5s
      retries: 5
      
volumes:
  task_db_data: